"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
* Docs service.
* @module api/DocsApi
* @version 3.0.0-beta3
*/
var DocsApi = /*#__PURE__*/function () {
  /**
  * Constructs a new DocsApi. 
  * @alias module:api/DocsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function DocsApi(apiClient) {
    _classCallCheck(this, DocsApi);

    this.apiClient = apiClient || _ApiClient["default"].instance;

    if (typeof window === 'undefined' && Boolean(process.env.FASTLY_API_TOKEN)) {
      this.apiClient.authenticate(process.env.FASTLY_API_TOKEN);
    }
  }
  /**
   * Gets all documentation associated with the Fastly API.
   * @param {Object} options
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<Object>} and HTTP response
   */


  _createClass(DocsApi, [{
    key: "getDocsWithHttpInfo",
    value: function getDocsWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Object];
      return this.apiClient.callApi('/docs', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Gets all documentation associated with the Fastly API.
     * @param {Object} options
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<Object>}
     */

  }, {
    key: "getDocs",
    value: function getDocs() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.getDocsWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Gets all documentation associated with a given Categorical Section where `section` is a regular_expression. Passing `invert=true` will force a return of everything that does not match the given regular expression.
     * @param {Object} options
     * @param {String} options.section - The section to search for. Supports regular expressions.
     * @param {String} options.invert - Get everything that does not match section.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: "getDocsSectionWithHttpInfo",
    value: function getDocsSectionWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null; // Verify the required parameter 'section' is set.

      if (options['section'] === undefined || options['section'] === null) {
        throw new Error("Missing the required parameter 'section'.");
      } // Verify the required parameter 'invert' is set.


      if (options['invert'] === undefined || options['invert'] === null) {
        throw new Error("Missing the required parameter 'invert'.");
      }

      var pathParams = {
        'section': options['section']
      };
      var queryParams = {
        'invert': options['invert']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi('/docs/section/{section}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Gets all documentation associated with a given Categorical Section where `section` is a regular_expression. Passing `invert=true` will force a return of everything that does not match the given regular expression.
     * @param {Object} options
     * @param {String} options.section - The section to search for. Supports regular expressions.
     * @param {String} options.invert - Get everything that does not match section.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: "getDocsSection",
    value: function getDocsSection() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.getDocsSectionWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Gets all documentation relating to a given 'Subject'.
     * @param {Object} options
     * @param {String} options.subject - The subject to search for. Supports regular expressions.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: "getDocsSubjectWithHttpInfo",
    value: function getDocsSubjectWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null; // Verify the required parameter 'subject' is set.

      if (options['subject'] === undefined || options['subject'] === null) {
        throw new Error("Missing the required parameter 'subject'.");
      }

      var pathParams = {
        'subject': options['subject']
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi('/docs/subject/{subject}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Gets all documentation relating to a given 'Subject'.
     * @param {Object} options
     * @param {String} options.subject - The subject to search for. Supports regular expressions.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: "getDocsSubject",
    value: function getDocsSubject() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.getDocsSubjectWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return DocsApi;
}();

exports["default"] = DocsApi;