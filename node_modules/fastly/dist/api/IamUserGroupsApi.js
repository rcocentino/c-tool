"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
* IamUserGroups service.
* @module api/IamUserGroupsApi
* @version 3.0.0-beta3
*/
var IamUserGroupsApi = /*#__PURE__*/function () {
  /**
  * Constructs a new IamUserGroupsApi. 
  * @alias module:api/IamUserGroupsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function IamUserGroupsApi(apiClient) {
    _classCallCheck(this, IamUserGroupsApi);

    this.apiClient = apiClient || _ApiClient["default"].instance;

    if (typeof window === 'undefined' && Boolean(process.env.FASTLY_API_TOKEN)) {
      this.apiClient.authenticate(process.env.FASTLY_API_TOKEN);
    }
  }
  /**
   * Delete a user group.
   * @param {Object} options
   * @param {String} options.user_group_id - Alphanumeric string identifying the user group.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */


  _createClass(IamUserGroupsApi, [{
    key: "deleteAUserGroupWithHttpInfo",
    value: function deleteAUserGroupWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null; // Verify the required parameter 'user_group_id' is set.

      if (options['user_group_id'] === undefined || options['user_group_id'] === null) {
        throw new Error("Missing the required parameter 'user_group_id'.");
      }

      var pathParams = {
        'user_group_id': options['user_group_id']
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/user-groups/{user_group_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Delete a user group.
     * @param {Object} options
     * @param {String} options.user_group_id - Alphanumeric string identifying the user group.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: "deleteAUserGroup",
    value: function deleteAUserGroup() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.deleteAUserGroupWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Get a user group.
     * @param {Object} options
     * @param {String} options.user_group_id - Alphanumeric string identifying the user group.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "getAUserGroupWithHttpInfo",
    value: function getAUserGroupWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null; // Verify the required parameter 'user_group_id' is set.

      if (options['user_group_id'] === undefined || options['user_group_id'] === null) {
        throw new Error("Missing the required parameter 'user_group_id'.");
      }

      var pathParams = {
        'user_group_id': options['user_group_id']
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/user-groups/{user_group_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Get a user group.
     * @param {Object} options
     * @param {String} options.user_group_id - Alphanumeric string identifying the user group.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "getAUserGroup",
    value: function getAUserGroup() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.getAUserGroupWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * List members of a user group.
     * @param {Object} options
     * @param {String} options.user_group_id - Alphanumeric string identifying the user group.
     * @param {Number} [options.per_page=20] - Number of records per page.
     * @param {Number} [options.page] - Current page.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "listUserGroupMembersWithHttpInfo",
    value: function listUserGroupMembersWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null; // Verify the required parameter 'user_group_id' is set.

      if (options['user_group_id'] === undefined || options['user_group_id'] === null) {
        throw new Error("Missing the required parameter 'user_group_id'.");
      }

      var pathParams = {
        'user_group_id': options['user_group_id']
      };
      var queryParams = {
        'per_page': options['per_page'],
        'page': options['page']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/user-groups/{user_group_id}/members', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * List members of a user group.
     * @param {Object} options
     * @param {String} options.user_group_id - Alphanumeric string identifying the user group.
     * @param {Number} [options.per_page=20] - Number of records per page.
     * @param {Number} [options.page] - Current page.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "listUserGroupMembers",
    value: function listUserGroupMembers() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.listUserGroupMembersWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * List roles in a user group.
     * @param {Object} options
     * @param {String} options.user_group_id - Alphanumeric string identifying the user group.
     * @param {Number} [options.per_page=20] - Number of records per page.
     * @param {Number} [options.page] - Current page.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "listUserGroupRolesWithHttpInfo",
    value: function listUserGroupRolesWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null; // Verify the required parameter 'user_group_id' is set.

      if (options['user_group_id'] === undefined || options['user_group_id'] === null) {
        throw new Error("Missing the required parameter 'user_group_id'.");
      }

      var pathParams = {
        'user_group_id': options['user_group_id']
      };
      var queryParams = {
        'per_page': options['per_page'],
        'page': options['page']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/user-groups/{user_group_id}/roles', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * List roles in a user group.
     * @param {Object} options
     * @param {String} options.user_group_id - Alphanumeric string identifying the user group.
     * @param {Number} [options.per_page=20] - Number of records per page.
     * @param {Number} [options.page] - Current page.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "listUserGroupRoles",
    value: function listUserGroupRoles() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.listUserGroupRolesWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * List service groups in a user group.
     * @param {Object} options
     * @param {String} options.user_group_id - Alphanumeric string identifying the user group.
     * @param {Number} [options.per_page=20] - Number of records per page.
     * @param {Number} [options.page] - Current page.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "listUserGroupServiceGroupsWithHttpInfo",
    value: function listUserGroupServiceGroupsWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null; // Verify the required parameter 'user_group_id' is set.

      if (options['user_group_id'] === undefined || options['user_group_id'] === null) {
        throw new Error("Missing the required parameter 'user_group_id'.");
      }

      var pathParams = {
        'user_group_id': options['user_group_id']
      };
      var queryParams = {
        'per_page': options['per_page'],
        'page': options['page']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/user-groups/{user_group_id}/service-groups', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * List service groups in a user group.
     * @param {Object} options
     * @param {String} options.user_group_id - Alphanumeric string identifying the user group.
     * @param {Number} [options.per_page=20] - Number of records per page.
     * @param {Number} [options.page] - Current page.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "listUserGroupServiceGroups",
    value: function listUserGroupServiceGroups() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.listUserGroupServiceGroupsWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * List all user groups.
     * @param {Object} options
     * @param {Number} [options.per_page=20] - Number of records per page.
     * @param {Number} [options.page] - Current page.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: "listUserGroupsWithHttpInfo",
    value: function listUserGroupsWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'per_page': options['per_page'],
        'page': options['page']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/user-groups', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * List all user groups.
     * @param {Object} options
     * @param {Number} [options.per_page=20] - Number of records per page.
     * @param {Number} [options.page] - Current page.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: "listUserGroups",
    value: function listUserGroups() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.listUserGroupsWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return IamUserGroupsApi;
}();

exports["default"] = IamUserGroupsApi;