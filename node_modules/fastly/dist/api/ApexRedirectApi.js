"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _ApexRedirect = _interopRequireDefault(require("../model/ApexRedirect"));

var _InlineResponse = _interopRequireDefault(require("../model/InlineResponse200"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
* ApexRedirect service.
* @module api/ApexRedirectApi
* @version 3.0.0-beta3
*/
var ApexRedirectApi = /*#__PURE__*/function () {
  /**
  * Constructs a new ApexRedirectApi. 
  * @alias module:api/ApexRedirectApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function ApexRedirectApi(apiClient) {
    _classCallCheck(this, ApexRedirectApi);

    this.apiClient = apiClient || _ApiClient["default"].instance;

    if (typeof window === 'undefined' && Boolean(process.env.FASTLY_API_TOKEN)) {
      this.apiClient.authenticate(process.env.FASTLY_API_TOKEN);
    }
  }
  /**
   * Delete an apex redirect by its ID.
   * @param {Object} options
   * @param {String} options.apex_redirect_id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
   */


  _createClass(ApexRedirectApi, [{
    key: "deleteApexRedirectWithHttpInfo",
    value: function deleteApexRedirectWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null; // Verify the required parameter 'apex_redirect_id' is set.

      if (options['apex_redirect_id'] === undefined || options['apex_redirect_id'] === null) {
        throw new Error("Missing the required parameter 'apex_redirect_id'.");
      }

      var pathParams = {
        'apex_redirect_id': options['apex_redirect_id']
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _InlineResponse["default"];
      return this.apiClient.callApi('/apex-redirects/{apex_redirect_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Delete an apex redirect by its ID.
     * @param {Object} options
     * @param {String} options.apex_redirect_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */

  }, {
    key: "deleteApexRedirect",
    value: function deleteApexRedirect() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.deleteApexRedirectWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Get an apex redirect by its ID.
     * @param {Object} options
     * @param {String} options.apex_redirect_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApexRedirect} and HTTP response
     */

  }, {
    key: "getApexRedirectWithHttpInfo",
    value: function getApexRedirectWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null; // Verify the required parameter 'apex_redirect_id' is set.

      if (options['apex_redirect_id'] === undefined || options['apex_redirect_id'] === null) {
        throw new Error("Missing the required parameter 'apex_redirect_id'.");
      }

      var pathParams = {
        'apex_redirect_id': options['apex_redirect_id']
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ApexRedirect["default"];
      return this.apiClient.callApi('/apex-redirects/{apex_redirect_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Get an apex redirect by its ID.
     * @param {Object} options
     * @param {String} options.apex_redirect_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApexRedirect}
     */

  }, {
    key: "getApexRedirect",
    value: function getApexRedirect() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.getApexRedirectWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * List all apex redirects for a particular service and version.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {Number} options.version_id - Integer identifying a service version.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ApexRedirect>} and HTTP response
     */

  }, {
    key: "listApexRedirectsWithHttpInfo",
    value: function listApexRedirectsWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null; // Verify the required parameter 'service_id' is set.

      if (options['service_id'] === undefined || options['service_id'] === null) {
        throw new Error("Missing the required parameter 'service_id'.");
      } // Verify the required parameter 'version_id' is set.


      if (options['version_id'] === undefined || options['version_id'] === null) {
        throw new Error("Missing the required parameter 'version_id'.");
      }

      var pathParams = {
        'service_id': options['service_id'],
        'version_id': options['version_id']
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_ApexRedirect["default"]];
      return this.apiClient.callApi('/service/{service_id}/version/{version_id}/apex-redirects', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * List all apex redirects for a particular service and version.
     * @param {Object} options
     * @param {String} options.service_id - Alphanumeric string identifying the service.
     * @param {Number} options.version_id - Integer identifying a service version.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ApexRedirect>}
     */

  }, {
    key: "listApexRedirects",
    value: function listApexRedirects() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.listApexRedirectsWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Update an apex redirect by its ID.
     * @param {Object} options
     * @param {String} options.apex_redirect_id
     * @param {String} [options.service_id]
     * @param {Number} [options.version]
     * @param {Date} [options.created_at] - Date and time in ISO 8601 format.
     * @param {Date} [options.deleted_at] - Date and time in ISO 8601 format.
     * @param {Date} [options.updated_at] - Date and time in ISO 8601 format.
     * @param {module:model/Number} [options.status_code] - HTTP status code used to redirect the client.
     * @param {Array.<String>} [options.domains] - Array of apex domains that should redirect to their WWW subdomain.
     * @param {Number} [options.feature_revision] - Revision number of the apex redirect feature implementation. Defaults to the most recent revision.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApexRedirect} and HTTP response
     */

  }, {
    key: "updateApexRedirectWithHttpInfo",
    value: function updateApexRedirectWithHttpInfo() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var postBody = null; // Verify the required parameter 'apex_redirect_id' is set.

      if (options['apex_redirect_id'] === undefined || options['apex_redirect_id'] === null) {
        throw new Error("Missing the required parameter 'apex_redirect_id'.");
      }

      var pathParams = {
        'apex_redirect_id': options['apex_redirect_id']
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'service_id': options['service_id'],
        'version': options['version'],
        'created_at': options['created_at'],
        'deleted_at': options['deleted_at'],
        'updated_at': options['updated_at'],
        'status_code': options['status_code'],
        'domains': this.apiClient.buildCollectionParam(options['domains'], 'csv'),
        'feature_revision': options['feature_revision']
      };
      var authNames = ['token'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = _ApexRedirect["default"];
      return this.apiClient.callApi('/apex-redirects/{apex_redirect_id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Update an apex redirect by its ID.
     * @param {Object} options
     * @param {String} options.apex_redirect_id
     * @param {String} [options.service_id]
     * @param {Number} [options.version]
     * @param {Date} [options.created_at] - Date and time in ISO 8601 format.
     * @param {Date} [options.deleted_at] - Date and time in ISO 8601 format.
     * @param {Date} [options.updated_at] - Date and time in ISO 8601 format.
     * @param {module:model/Number} [options.status_code] - HTTP status code used to redirect the client.
     * @param {Array.<String>} [options.domains] - Array of apex domains that should redirect to their WWW subdomain.
     * @param {Number} [options.feature_revision] - Revision number of the apex redirect feature implementation. Defaults to the most recent revision.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApexRedirect}
     */

  }, {
    key: "updateApexRedirect",
    value: function updateApexRedirect() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.updateApexRedirectWithHttpInfo(options).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return ApexRedirectApi;
}();

exports["default"] = ApexRedirectApi;